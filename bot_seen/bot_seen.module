<?php
// $Id$

/**
 * @file
 * Enables users to find out the last time a channel member was active.
 */

/**
 * Implementation of hook_help().
 */
function bot_seen_help($section) {
  switch ($section) {
    case 'irc:features':
      return array(t('Seen'));
    case 'irc:features#seen':
      return t('If someone asks "seen Morbus", the bot will report the last time they\'ve been seen, where, and what their last known message was. Directly addressing the bot will also allow the more complex syntax of "seen Morbus? seen d8uv?", "have you seen sbp?" and similar forms. * can be used as a wildcard, but only with a minimum of three other characters. A maximum of three results are displayed for any one request.');
  }
}

/**
 * Listen for conversation directed at, or around, the bot.
 *
 * @param $data
 *   The regular $data object prepared by the IRC library.
 * @param $from_query
 *   Boolean; whether this was a queried request.
 */
function bot_seen_irc_msg_channel($data, $from_query = FALSE) {
  $bot_name = variable_get('bot_nickname', 'bot_module');
  $addressed = "$bot_name:? ?"; // bot name prefixed.
  $to = $from_query ? $data->nick : $data->channel;
  $nicks = array(); // list of nicks to search for.

  // log the message, whatever it is. no UPDATEs; just start anew, eh?
  db_query("DELETE FROM {bot_seen} WHERE LOWER(nick) = '%s'", drupal_strtolower($data->nick));
  db_query("INSERT INTO {bot_seen} (nick, channel, message, timestamp) VALUES ('%s', '%s', '%s', %d)", $data->nick, $data->channel, $data->message, time());

  // Match 'seen foo' in any mode, regardless if the bot was addressed.
  if (preg_match("/^seen ([a-zA-Z0-9\[\]\{\}\\\|\^\`\-\_\*]*)( ?\?|$)/", $data->message, $matches)) {
    $nicks[] = $matches[1]; // the bot will listen to the first request only when unaddressed.
  }

  // Our more complicated regexp allows multiple types of syntax and
  // more than one lookup per query, but require direct addressing.
  if (preg_match("/^($addressed)/i", $data->message) || $from_query) {
    if (preg_match_all('!.*?seen ([a-zA-Z0-9\[\]\{\}\\\|\^\`\-\_\*]*)( ?\?|$| ?\,)!', $data->message, $matches)) {
      foreach ($matches[1] as $match) { // for every construct we've found in our message, find the user.
        $nicks[] = $match; // the bot will respond addressed to multiple requests and styles in one query.
      }
    }
  }

  // fetch 'em.
  $messages = array();
  foreach (array_unique($nicks) as $nick) {
    // allow % SQL matching, but only if the nick is three non-* characters or longer.
    if (strlen(str_replace('*', '', $nick)) >= 3) { $nick = str_replace('*', '%', $nick); }
    $results = db_query("SELECT nick, channel, message, timestamp FROM {bot_seen} WHERE LOWER(nick) LIKE '%s' ORDER BY timestamp DESC", drupal_strtolower($nick));
    while ($result = db_fetch_object($results)) { // throw 'em on the bar-b... we'll shrink the result set later. to keep it relevant, we order by timestamp.
      $messages[] = t("!nick was last seen in !channel !this_long ago saying '!message'.", array('!nick' => $result->nick, '!this_long' => format_interval(time() - $result->timestamp), '!channel' => $result->channel, '!message' => $result->message, ));
    } if (count($messages) == 0) { $messages[] = t("Sorry, I haven't seen !match.", array('!match' => $nick, )); }
  }

  // display a maximum of up to three results to...
  $messages = array_splice($messages, 0, 3); // ...prevent flooding.
  foreach ($messages as $message) { bot_message($to, $message); }
  // @todo include a message stating number of results not shown.
}

/**
 * All responses are available via a query.
 */
function bot_seen_irc_msg_query($data) {
  bot_seen_irc_msg_channel($data, TRUE);
}
