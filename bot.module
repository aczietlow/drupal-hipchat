<?php
// $Id$

/**
 * @file
 * Enables a network and plugin framework for IRC bots.
 */

/**
 * Implementation of hook_help().
 */
function bot_help($section) {
  switch ($section) {
    case 'admin/settings/bot':
      return t('Configure your bot framework with these settings.');
  }
}

/**
 * Implementation of hook_perm().
 */
function bot_perm() {
  return array('administer bot');
}

/**
 * Implementation of hook_menu().
 */
function bot_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array(
      'access'             => user_access('administer bot'),
      'callback'           => 'drupal_get_form',
      'callback arguments' => 'bot_settings',
      'description'        => t('Configure your bot framework with these settings.'),
      'path'               => 'admin/settings/bot',
      'title'              => t('Bot framework'),
    );
  }

  // minor CSS width fix for module names with more than one word.
  if (arg(0) == 'admin' && arg(1) == 'build' && arg(2) == 'modules') {
    drupal_add_css(drupal_get_path('module', 'bot') .'/bot.css');
  }

  return $items;
}

/**
 * Framework related messages and features.
 *
 * @param $data
 *   The regular $data object prepared by the IRC library.
 * @param $from_query
 *   Boolean; whether this was a queried request.
 */
function bot_irc_msg_channel($data, $from_query = 0) {
  $addressed = $from_query ? '' : variable_get('bot_nickname', 'bot_module') .':? ';
  $to = $from_query ? $data->nick : $data->channel;

  // our IRC help interface which piggybacks off of Drupal's hook_help().
  if (preg_match('/^'.$addressed.'help\??(.*)?/', $data->message, $help_matches)) {
    if (!$help_matches[1]) { // no specific help was asked for.
      $irc_features = module_invoke_all('help', 'irc:features');
      bot_message($to, t('Detailed information is available by asking for "help <feature>" where <feature> is one of: !features.', array('!features' => implode(', ', $irc_features))));
    }
    else { // a specific type of help was required, so load up just that bit of text.
      $feature_name = 'irc:features#'. preg_replace('/[^\w\d]/', '_', strtolower(trim($help_matches[1])));
      $feature_help = module_invoke_all('help', $feature_name);
      bot_message($to, array_shift($feature_help));
    }
  }

}

/**
 * All responses are available via a query.
 */
function bot_irc_msg_query($data) {
  bot_irc_msg_channel($data, 1);
}

/**
 * Send a message to a channel or user.
 *
 * @param $to
 *   A channel or user.
 * @param $message
 *   The message string to send.
 */
function bot_message($to, $message) {
  global $irc; // from bot_start.php.
  $type = strpos($to, '#') == 0 ? 'CHANNEL' : 'QUERY';
  $irc->message(constant('SMARTIRC_TYPE_'.$type), $to, $message);
}

/**
 * Configures the bot framework; system_settings_form().
 */
function bot_settings() {
  $form = array();

  $form['bot_server'] = array(
    '#default_value' => variable_get('bot_server', 'irc.freenode.net'),
    '#description'   => t('Enter the IRC server the bot will connect to.'),
    '#title'         => t('IRC server'),
    '#type'          => 'textfield',
  );
  $form['bot_server_port'] = array(
    '#default_value' => variable_get('bot_server_port', 6667),
    '#description'   => t('Enter the IRC port of the IRC server. 6667 is the most common configuration.'),
    '#title'         => t('IRC server port'),
    '#type'          => 'textfield',
  );
  $form['bot_nickname'] = array(
    '#default_value' => variable_get('bot_nickname', 'bot_module'),
    '#description'   => t('Enter the nickname the bot will login as.'),
    '#title'         => t('Bot nickname'),
    '#type'          => 'textfield',
  );
  $form['bot_channels'] = array(
    '#default_value' => variable_get('bot_channels', '#test'),
    '#description'   => t('Enter a comma-separated list of channels the bot will automatically join.'),
    '#title'         => t('Bot channels'),
    '#type'          => 'textfield',
  );
  $form['bot_debugging'] = array(
    '#default_value' => variable_get('bot_debugging', 0), // spits out a TON of (useful) stuff.
    '#description'   => t('If checked, send Net_SmartIRC\'s SMARTIRC_DEBUG_ALL to the shell.'),
    '#options'       => array('0' => t('No'), '1' => t('Yes')),
    '#title'         => t('Enable debugging'),
    '#type'          => 'checkbox',
  );

  return system_settings_form($form);
}
