<?php
// $Id$

/**
 * @file
 * Enables various Drupal developer friendly actions.
 */

/**
 * Implementation of hook_help().
 */
function bot_drupal_help($section) {
  switch ($section) {
    case 'irc:features':
      return array(t('Drupal URLs'));
    case 'irc:features#drupal_urls':
      return t('Displays the title of drupal.org URLs; multiple URLs in a single message are acceptable. Also supports node IDs such as "#12345" or "4321", but only if that is the entirety of the message and the number is at least 4 digits. Popular and recent URLs are tracked at <!url>.', array('!url' => url('bot/drupal_urls', NULL, NULL, TRUE)));
    case 'bot/drupal_urls':
      return '<p>'.t('View the most recent and popular URLs mentioned in the Drupal IRC channels.').'</p>';
  }
}

/**
 * Implementation of hook_menu().
 */
function bot_drupal_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array(
      'access'             => user_access('access content'),
      'callback'           => 'bot_drupal_urls_overview',
      'description'        => t('View the most recent and popular URLs mentioned in the Drupal IRC channels.'),
      'path'               => 'bot/drupal_urls',
      'title'              => t('Bot Drupal URLs'),
    );
  }

  return $items;
}

/**
 * Listen for Drupal URLs or a node ID and respond with the title.
 *
 * @param $data
 *   The regular $data object prepared by the IRC library.
 * @param $from_query
 *   Boolean; whether this was a queried request.
 */
function bot_drupal_irc_msg_channel($data, $from_query = 0) {
  $to = $from_query ? $data->nick : $data->channel;
  $message = $data->message;

  // this is a *.drupal.org URL or what appears to be a recent nid.
  if (preg_match_all('/(http:\/\/(groups.)?drupal.org\/node\/\d+)/i', $data->message, $url_matches) ||
      preg_match('/^#?(\d{4,})$/', $data->message, $url_matches)) { // #12345 or 5432.

    // any numbers we fake into a URL for the match looping.
    if (!is_array($url_matches[1]) && is_numeric($url_matches[1])) {
      $url_matches[1] = array('http://drupal.org/node/'. $url_matches[1]);
    }

    // retrieve each URL.
    foreach ($url_matches[1] as $url) {
      $result = drupal_http_request($url);
      preg_match('/<title>(.*?)\| (groups.)?drupal.org<\/title>/', $result->data, $title_matches);
      if (!$title_matches[1]) { $title_matches[1] = '<'.t('unable to determine title.').'>'; }
      bot_message($data->channel, "$url => ". decode_entities($title_matches[1]));

      // update the database with last seen and count.
      if (db_result(db_query('SELECT url FROM {bot_urls} WHERE url = "%s"', $url))) {
         db_query('UPDATE {bot_urls} SET title = "%s", count = count + 1, last_seen = %d WHERE url = "%s"', decode_entities($title_matches[1]), time(), $url);
      } else { db_query('INSERT INTO {bot_urls} (url, title, count, last_seen) VALUES ("%s", "%s", %d, %d)', $url, decode_entities($title_matches[1]), 1, time()); }
    }
  }
}

/**
 * All responses are available via a query.
 */
function bot_drupal_irc_msg_query($data) {
  bot_drupal_irc_msg_channel($data, 1);
}

/**
 * Display top ten lists of the most recent and popular.
 */
function bot_drupal_urls_overview() {
  $output = NULL; $headers = array(t('URL or Title'), t('#'), t('Last Seen'));
  drupal_add_css(drupal_get_path('module', 'bot_drupal') .'/bot_drupal.css');

  $output .= '<h2>'.t('Popular URLs in the last 14 days').'</h2>';
  $results = pager_query('SELECT * FROM {bot_urls} WHERE last_seen >= %d ORDER BY count DESC, last_seen DESC', 10, 1, NULL, time() - 60*60*24*14);
  $rows = array(); while ($result = db_fetch_object($results)) { // titles could possibly be blank.
    $rows[] = array(array('data' => l($result->title ? $result->title : $result->url, $result->url), 'class' => 'title'),
      array('data' => $result->count, 'class' => 'count'), array('data' => format_date($result->last_seen), 'class' => 'last_seen'));
  } $output .= theme('table', $headers, $rows, array('id' => 'drupal_urls_popular')) . theme('pager', NULL, 10, 1);

  $output .= '<h2>'.t('Most recent URLs').'</h2>';
  $results = pager_query('SELECT * FROM {bot_urls} ORDER BY last_seen DESC', 10, 2);
  $rows = array(); while ($result = db_fetch_object($results)) { // titles could possibly be blank.
    $rows[] = array(array('data' => l($result->title ? $result->title : $result->url, $result->url), 'class' => 'title'),
      array('data' => $result->count, 'class' => 'count'), array('data' => format_date($result->last_seen), 'class' => 'last_seen'));
  } $output .= theme('table', $headers, $rows, array('id' => 'drupal_urls_recent')) . theme('pager', NULL, 10, 2);

  return $output;
}

